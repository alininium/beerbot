
{-# LANGUAGE OverloadedStrings #-}
module DataTypes (
    Model,
    Emoji,
    Subject,
    Verb,
    Object,
    RPInstruction (..),
    Command (..),
    Action (..),
    Pronoun (..),
    User (..),
    UserFromMessage (..),
    userFromTuple,
    userToTuple,
    rpMapping,
    simpleResponseMapping,
    setGenderMapping
) where

import Data.List (intercalate)
import Data.Text (Text)

type Model = String

type Emoji = String 

type Subject = String 
type Verb = String 
type Object = String 

data RPInstruction = RPInstruction Verb Emoji deriving Show

data Command = RP RPInstruction String
             | RPTargeted RPInstruction Object 
             | SimpleResponse String  
             -- | RPMultiple [RPInstruction] 
             | RegularMessageWithI Text 
             | GenderChange Pronoun deriving Show

data Action
  = NoAction
  | AnalyzeText UserFromMessage Text
  | ReplyText UserFromMessage Text
  | ReplyRp UserFromMessage UserFromMessage RPInstruction Text
  | SetGender UserFromMessage Pronoun

data Pronoun = HeHim | SheHer | TheyThem | ItIts | Gendergap | Unset deriving (Show, Eq)



data User = TelegramUser {
  telegram_id :: Integer,
  username :: Text,
  pronoun :: Pronoun,
  used_mask :: Integer,
  used_fem :: Integer,
  used_plur :: Integer
}  deriving Show

data UserFromMessage = UserFromMessage {
  from_message_telegram_id :: Integer,
  from_message_username:: Text
} deriving Show

pronounFromString :: Text -> Pronoun
pronounFromString s = case s of "he"        -> HeHim
                                "she"       -> SheHer
                                "they"      -> TheyThem
                                "it"        -> ItIts
                                "gendergap" -> Gendergap
                                _           -> Unset

pronounToString :: Pronoun -> Text
pronounToString p = case p of HeHim     -> "he"
                              SheHer    -> "she"
                              TheyThem  -> "they"
                              ItIts     -> "it"
                              Gendergap -> "gendergap"
                              Unset     -> "unk"

userFromTuple :: (Integer, Text, Text, Integer, Integer, Integer) -> User
userFromTuple (id, username, pronoun, used_mask, used_fem, used_plur) = TelegramUser { 
    telegram_id = id 
  , username = username
  , pronoun = pronounFromString pronoun 
  , used_mask = used_mask
  , used_fem = used_fem
  , used_plur = used_plur
}

userToTuple :: User -> (Text, Text, Integer, Integer, Integer, Integer)
userToTuple TelegramUser{telegram_id = telegram_id,
  username = username,
  pronoun = pronoun,
  used_mask = used_mask,
  used_fem = used_fem,
  used_plur = used_plur} 
  = (username, pronounToString pronoun, used_mask, used_fem, used_plur, telegram_id)



rpMapping :: [(String, RPInstruction)]
rpMapping = 
  [ ("–æ–±–Ω—è—Ç—å",                    RPInstruction "–æ–±–Ω—è–ª@"                             "ü§ó")
  , ("–¥–∞—Ç—å –ª–µ—â–∞",                 RPInstruction "–¥–∞–ª@ –ª–µ—â–∞"                          "üêü")
  , ("—Å–ª–æ–º–∞—Ç—å –∫–æ–ª–µ–Ω–∏",            RPInstruction "—Å–ª–æ–º–∞–ª@ –∫–æ–ª–µ–Ω–∏"                     "ü¶µ")
  , ("–∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –Ω–æ–≥–æ—Ç–æ—á–∫–∏",     RPInstruction "–∑–∞–ø–∏—Å–∞–ª@ –Ω–∞ –Ω–æ–≥–æ—Ç–æ—á–∫–∏"              "üíÖ")
  , ("—É–±–∏—Ç—å",                     RPInstruction "—É–±–∏–ª@"                              "‚ò†Ô∏è")
  , ("–∑–∞—Ö—É—è—Ä–∏—Ç—å",                 RPInstruction "–∑–∞—Ö—É—è—Ä–∏–ª@"                          "üíÄ")
  , ("—Ä–∞—Å—Å—Ç—Ä–µ–ª—è—Ç—å",               RPInstruction "—Ä–∞—Å—Å—Ç—Ä–µ–ª—è–ª@"                        "üî´")
  , ("–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å",                RPInstruction "–ø–æ—Ü–µ–ª–æ–≤–∞–ª@"                         "üòò")
  , ("—É–∫—É—Å–∏—Ç—å",                   RPInstruction "—É–∫—É—Å–∏–ª@"                            "üò¨")
  , ("–∫—É—Å–Ω—É—Ç—å",                   RPInstruction "—É–∫—É—Å–∏–ª@"                            "üò¨")
  , ("–∫—É—Å—å",                      RPInstruction "–∫—É—Å—å–Ω—É–ª@"                           "üò¨")
  , ("–∫—É—Å—å–Ω—É—Ç—å",                  RPInstruction "–∫—É—Å—å–Ω—É–ª@"                           "üò¨")
  , ("–ø–Ω—É—Ç—å",                     RPInstruction "–ø–Ω—É–ª@"                              "üëû")
  , ("–ø—Ä–∏–∂–∞—Ç—å",                   RPInstruction "–ø—Ä–∏–∂–∞–ª@"                            "ü§≤")
  , ("–ø–æ–≥–ª–∞–¥–∏—Ç—å",                 RPInstruction "–ø–æ–≥–ª–∞–¥–∏–ª@"                          "ü§≤")
  , ("–ø–æ—Ç—Ä–æ–≥–∞—Ç—å",                 RPInstruction "–ø–æ—Ç—Ä–æ–≥–∞–ª@"                          "üôå")
  , ("–ª–∏–∑–Ω—É—Ç—å",                   RPInstruction "–ª–∏–∑–Ω—É–ª@"                            "üëÖ")
  , ("–ø–æ–Ω—é—Ö–∞—Ç—å",                  RPInstruction "–ø–æ–Ω—é—Ö–∞–ª@"                           "üëÉ")
  , ("—É–¥–∞—Ä–∏—Ç—å",                   RPInstruction "—É–¥–∞—Ä–∏–ª@"                            "ü§úüòµ")
  , ("—à–ª–µ–ø–Ω—É—Ç—å",                  RPInstruction "—à–ª–µ–ø–Ω—É–ª@"                           "üëè")
  , ("–≤–∑—è—Ç—å –Ω–∞ —Ä—É—á–∫–∏",            RPInstruction "–≤–∑—è–ª@ –Ω–∞ —Ä—É—á–∫–∏"                     "ü§≤")
  , ("—à–ª—ë–ø–Ω—É—Ç—å",                  RPInstruction "—à–ª—ë–ø–Ω—É–ª@"                           "üëè")
  , ("–º–∞–π—è—à–∏—Ç—å",                  RPInstruction "–æ—Ç–º–∞–π—è—à–∏–ª–∞"                         "üíû")
  , ("–≥–∏–ª—å–æ—Ç–∏–Ω–∏—Ä–æ–≤–∞—Ç—å",           RPInstruction "–æ—Ç—Ä—É–±–∏–ª@ –≥–æ–ª–æ–≤—É –Ω–∞ –≥–∏–ª—å–æ—Ç–∏–Ω–µ"       "üî™üá≤üá´")
  , ("–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–∏–≤–∞",           RPInstruction "–ø—Ä–µ–¥–ª–æ–∂–∏–ª@ –ø–∏–≤–∞"                    "üçª")
  , ("–ø—É—Å—Ç–∏—Ç—å –º–∏—Ü–µ–ª–∏–π",           RPInstruction "–ø—É—Å—Ç–∏–ª@ –º–∏—Ü–µ–ª–∏–π –≤"                  "üçÑ")
  , ("–¥–µ—Ñ–µ–Ω–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å",          RPInstruction "–æ—Ç–ø—Ä–∞–≤–∏–ª@ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ"      "üè†")
  --, ("–ø–æ–≤–µ—Å–∏—Ç—å",                  RPInstruction "–ø–æ–≤–µ—Å–∏–ª@"      "ü™¢")
  ]


setGenderMapping :: [(String, Pronoun)]
setGenderMapping = 
  [ (word ++ " " ++ secondWord , gender) | word <- ["–ø—Ä–æ–Ω–∞—É–Ω—ã", "–ø—Ä–æ–Ω–∞—É–Ω", "–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è", "–≥–µ–Ω–¥–µ—Ä", "–ø—Ä–æ–Ω–∞—É–Ω—Å", "—Ä–æ–¥", "–ø–æ–ª"],
                                          (secondWord, gender) <- [ ("-", Unset)
                                                                  , ("–≥–µ–Ω–¥–µ—Ä–≥–µ–ø", Gendergap)
                                                                  , ("–≥–µ–Ω–¥–µ—Ä–≥—ç–ø", Gendergap)
                                                                  , ("–æ–Ω–∏", TheyThem)
                                                                  , ("–æ–Ω–∞", SheHer)
                                                                  , ("–æ–Ω–æ", ItIts)
                                                                  , ("–æ–Ω", HeHim)
                                                                  , ("–∂–µ–Ω", SheHer)
                                                                  , ("–º—É–∂", HeHim)
                                                                  , ("–º", HeHim)
                                                                  , ("–∂", SheHer)
                                          ]

  ]


getStringFromMapping :: [(String, a)] -> String
getStringFromMapping a = intercalate "\n" $ map fst a

helpText :: String
helpText = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" ++ getStringFromMapping simpleResponseMapping

helpTextRp :: String
helpTextRp = "—Ä–ø –∫–æ–º–∞–Ω–¥—ã:\n\n" ++ getStringFromMapping rpMapping

simpleResponseMapping :: [(String, String)]
simpleResponseMapping = 
  [ ("–ø–∏–Ω–≥", "–ü–æ–Ω–≥")
  , ("—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "C–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤ ü•∫")
  , ("—Å–ª–∞–≤–∞ –ø–∞—Ä—Ç–∏–∏", "–°–ª–∞–≤–∞ –ü–∞—Ä—Ç–∏–∏!")
  , ("–∫—Ç–æ –∑–¥–µ—Å—å –≤–ª–∞—Å—Ç—å", "–ü–ê–†–¢–ò–Ø!")
  , ("—Å–ª–∞–≤–∞ –ø–∞—Ä—Ç–∏–∏!", "–°–ª–∞–≤–∞ –ü–∞—Ä—Ç–∏–∏!")
  , ("—Ö–æ—á—É —É–º–µ—Ä–µ—Ç—å", "–Ω–µ –Ω–∞–¥–æ ü•∫")
  , ("—è —Ö–æ—á—É —É–º–µ—Ä–µ—Ç—å", "–Ω–µ –Ω–∞–¥–æ ü•∫")
  , ("—Ö–æ—á—É —Å–¥–æ—Ö–Ω—É—Ç—å", "–Ω–µ –Ω–∞–¥–æ ü•∫")
  , ("—è —Ö–æ—á—É —Å–¥–æ—Ö–Ω—É—Ç—å", "–Ω–µ –Ω–∞–¥–æ ü•∫")
  , ("–∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥", "https://github.com/alininium/beerbot")
  , ("–ø–æ–º–æ—â—å —Ä–ø", helpTextRp)
  , ("–∫–æ–º–∞–Ω–¥—ã —Ä–ø", helpTextRp)
  , ("–ø–æ–º–æ—â—å", helpText)
  , ("–∫–æ–º–∞–Ω–¥—ã", helpText)
  , ("–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è", "–≤–≤–µ–¥–∏—Ç–µ\n–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è –æ–Ω/–æ–Ω–∞/–æ–Ω–æ/–æ–Ω–∏/–≥–µ–Ω–¥–µ—Ä–≥–µ–ø\n—á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ–∏ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è")
  ]
