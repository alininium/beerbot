
module DataTypes (
    Model,
    Emoji,
    Subject,
    Verb,
    Object,
    RPInstruction (..),
    Command (..),
    Action (..),
    rpMapping,
    simpleResponseMapping
) where

import Data.List (intercalate)

type Model = ()

type Emoji = String 

type Subject = String 
type Verb = String 
type Object = String 

data RPInstruction = RPInstruction Verb Emoji deriving Show

data Command = RP RPInstruction
             | RPTargeted RPInstruction Object 
             | SimpleResponse String  
             | RPMultiple [RPInstruction] deriving Show

data Action
  = NoAction
  | ReplyText String


rpMapping :: [(String, RPInstruction)]
rpMapping = 
  [ ("–æ–±–Ω—è—Ç—å",                    RPInstruction "–æ–±–Ω—è–ª(–∞)"                             "ü§ó")
  , ("–¥–∞—Ç—å –ª–µ—â–∞",                 RPInstruction "–¥–∞–ª(–∞) –ª–µ—â–∞"                          "üêü")
  , ("—Å–ª–æ–º–∞—Ç—å –∫–æ–ª–µ–Ω–∏",            RPInstruction "—Å–ª–æ–º–∞–ª(–∞) –∫–æ–ª–µ–Ω–∏"                     "ü¶µ")
  , ("–∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –Ω–æ–≥–æ—Ç–æ—á–∫–∏",     RPInstruction "–∑–∞–ø–∏—Å–∞–ª(a) –Ω–∞ –Ω–æ–≥–æ—Ç–æ—á–∫–∏"              "üíÖ")
  , ("—É–±–∏—Ç—å",                     RPInstruction "—É–±–∏–ª(–∞)"                              "‚ò†Ô∏è")
  , ("—Ä–∞—Å—Å—Ç—Ä–µ–ª—è—Ç—å",               RPInstruction "—Ä–∞—Å—Å—Ç—Ä–µ–ª—è–ª(–∞)"                        "üî´")
  , ("–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å",                RPInstruction "–ø–æ—Ü–µ–ª–æ–≤–∞–ª(–∞)"                         "üòò")
  , ("–∫—É—Å—å",                      RPInstruction "–∫—É—Å—å–Ω—É–ª(–∞)"                           "üò¨")
  , ("–∫—É—Å—å–Ω—É—Ç—å",                  RPInstruction "–∫—É—Å—å–Ω—É–ª(–∞)"                           "üò¨")
  , ("—É–∫—É—Å–∏—Ç—å",                   RPInstruction "—É–∫—É—Å–∏–ª(–∞)"                            "üò¨")
  , ("–ø–Ω—É—Ç—å",                     RPInstruction "–ø–Ω—É–ª(–∞)"                              "üëû")
  , ("–ø—Ä–∏–∂–∞—Ç—å",                   RPInstruction "–ø—Ä–∏–∂–∞–ª(–∞)"                            "ü§≤")
  , ("–ø–æ–≥–ª–∞–¥–∏—Ç—å",                 RPInstruction "–ø–æ–≥–ª–∞–¥–∏–ª(–∞)"                          "ü§≤")
  , ("–ø–æ—Ç—Ä–æ–≥–∞—Ç—å",                 RPInstruction "–ø–æ—Ç—Ä–æ–≥–∞–ª(–∞)"                          "üôå")
  , ("–ª–∏–∑–Ω—É—Ç—å",                   RPInstruction "–ª–∏–∑–Ω—É–ª(–∞)"                            "üëÖ")
  , ("–ø–æ–Ω—é—Ö–∞—Ç—å",                  RPInstruction "–ø–æ–Ω—é—Ö–∞–ª(–∞)"                           "üëÉ")
  , ("—É–¥–∞—Ä–∏—Ç—å",                   RPInstruction "—É–¥–∞—Ä–∏–ª(–∞)"                            "ü§úüòµ")
  , ("—à–ª–µ–ø–Ω—É—Ç—å",                  RPInstruction "—à–ª–µ–ø–Ω—É–ª(–∞)"                           "üëè")
  , ("—à–ª—ë–ø–Ω—É—Ç—å",                  RPInstruction "—à–ª—ë–ø–Ω—É–ª(–∞)"                           "üëè")
  , ("–º–∞–π—è—à–∏—Ç—å",                  RPInstruction "–æ—Ç–º–∞–π—è—à–∏–ª–∞"                           "üíû")
  , ("–≥–∏–ª—å–æ—Ç–∏–Ω–∏—Ä–æ–≤–∞—Ç—å",           RPInstruction "–æ—Ç—Ä—É–±–∏–ª(–∞) –≥–æ–ª–æ–≤—É –Ω–∞ –≥–∏–ª—å–æ—Ç–∏–Ω–µ"       "üî™üá≤üá´")
  , ("–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–∏–≤–∞",           RPInstruction "–ø—Ä–µ–¥–ª–æ–∂–∏–ª(–∞) –ø–∏–≤–∞"                    "üçª")
  , ("–ø—É—Å—Ç–∏—Ç—å –º–∏—Ü–µ–ª–∏–π",           RPInstruction "–ø—É—Å—Ç–∏–ª(–∞) –º–∏—Ü–µ–ª–∏–π –≤"                  "üçÑ")
  , ("–¥–µ—Ñ–µ–Ω–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å",          RPInstruction "–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ"      "üè†")
  ]


helpText :: String
helpText = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–ø –∫–æ–º–∞–Ω–¥—ã:\n\n" ++ ( intercalate "\n" $ map fst rpMapping)

simpleResponseMapping :: [(String, String)]
simpleResponseMapping = 
  [ ("—Ö–æ—á—É —É–º–µ—Ä–µ—Ç—å", "–Ω–µ –Ω–∞–¥–æ ü•∫")
  , ("—è —Ö–æ—á—É —É–º–µ—Ä–µ—Ç—å", "–Ω–µ –Ω–∞–¥–æ ü•∫")
  , ("—Ö–æ—á—É —Å–¥–æ—Ö–Ω—É—Ç—å", "–Ω–µ –Ω–∞–¥–æ ü•∫")
  , ("—è —Ö–æ—á—É —Å–¥–æ—Ö–Ω—É—Ç—å", "–Ω–µ –Ω–∞–¥–æ ü•∫")
  , ("–ø–∏–Ω–≥", "–ü–æ–Ω–≥")
  , ("—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "C–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤ ü•∫")
  , ("—Å–ª–∞–≤–∞ –ø–∞—Ä—Ç–∏–∏", "–°–ª–∞–≤–∞ –ü–∞—Ä—Ç–∏–∏!")
  , ("c–ª–∞–≤–∞ –ø–∞—Ä—Ç–∏–∏!", "–°–ª–∞–≤–∞ –ü–∞—Ä—Ç–∏–∏!")
  , ("–ø–æ–º–æ—â—å", helpText)
  ]
